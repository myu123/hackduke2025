import torch
import torch.nn as nn

class ZulfRNNModel(nn.Module):
    def __init__(self, input_dim=4, hidden_dim=64, num_layers=1):

        super(ZulfRNNModel, self).__init__()
        self.hidden_dim = hidden_dim
        self.num_layers = num_layers

        self.lstm = nn.LSTM(input_dim, hidden_dim, num_layers, batch_first=True)

        self.fc = nn.Linear(hidden_dim, 1)

    def forward(self, x):
        lstm_out, _ = self.lstm(x)

        out = self.fc(lstm_out)   
        return out

def weighted_mse_loss(pred, target, weight=10.0):
    diff = pred - target
    weights = torch.where(target > 0.5, weight, 1.0)
    return torch.mean(weights * diff ** 2)
