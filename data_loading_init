import os
import numpy as np

def read_dat_file(file_path):
    try:
        return np.genfromtxt(file_path)
    except Exception as e:
        print(f"Error reading {file_path}: {e}")
        return None

def load_data_from_directories(root_dir, sub_dirs, seq_length=1000, min_lines=10000):
    data = []
    for sub_dir in sub_dirs:
        dir_path = os.path.join(root_dir, sub_dir)
        print(f"Searching in: {dir_path}")
        for root, _, files in os.walk(dir_path):
            for file in files:
                if file.endswith('.dat'):
                    file_path = os.path.join(root, file)
                    print(f"Found .dat file: {file_path}")
                    try:
                        file_data = read_dat_file(file_path)
                        
                        if file_data is None or file_data.shape[0] < min_lines:
                            print(f"Skipping {file_path} due to insufficient data points ({file_data.shape[0] if file_data is not None else 'N/A'} < {min_lines})")
                            continue
                        
                        if file_data.shape[0] < seq_length:
                            padded_data = np.pad(file_data, ((0, seq_length - file_data.shape[0]), (0, 0)), mode='constant', constant_values=0)
                            data.append(padded_data)
                        elif file_data.shape[0] > seq_length:
                            trimmed_data = file_data[:seq_length]
                            data.append(trimmed_data)
                        else:
                            data.append(file_data)
                    except Exception as e:
                        print(f"Error reading {file_path}: {e}")
    
    if len(data) == 0:
        raise ValueError("No valid .dat files found or all files are invalid.")
    return np.array(data)

def preprocess_data(data):
    if data.size == 0:
        raise ValueError("No data to preprocess.")
    
    if np.any(np.isnan(data)) or np.any(np.isinf(data)):
        raise ValueError("Data contains NaN or inf values. Please clean the dataset.")
    
    data_normalized = (data - np.mean(data, axis=(0, 1))) / np.std(data, axis=(0, 1))  
    return data_normalized.astype(np.float32)  
